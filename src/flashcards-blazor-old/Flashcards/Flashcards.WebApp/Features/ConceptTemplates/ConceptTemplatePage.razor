@page "/concept-templates"
@using Flashcards.WebApp.Shared.EFCore

@inject IMediator Mediator

@if (_response is null) { return; }

<PageTitle>Concept Templates</PageTitle>

<SpyPageContent>
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined">
        <MudMenu @ref="@_menu" ListClass="flex p-2" Icon="@Icons.Material.Filled.Add">
            <MudForm @ref="_form">
                <MudTextField Label="Name"
                              @bind-Value=@_newItemName
                              Required
                              OnKeyDown="@(() => Add(_newItemName))" />
            </MudForm>
            <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => Add(_newItemName)" />
        </MudMenu>
    </MudButtonGroup>
    <MudDataGrid T="ConceptTemplateDTO"
                 Items="@_response.Values"
                 ReadOnly="false"
                 EditMode="@DataGridEditMode.Form"
                 CommittedItemChanges="@CommittedItemChanges"
                 HeaderClass="!hidden"
                 Class="w-full"
                 RowClass="!flex !justify-between">
        <Columns>
            @* <PropertyColumn Title="Id" Property="x => x.Id" /> *@
            <PropertyColumn Property="@(x => x.Name)" HeaderClass="!hidden" CellClass="[&::before]:!content-none border-none" />
            <TemplateColumn CellClass="d-flex justify-end border-none">
                <CellTemplate>
                    <MudIconButton Size="@Size.Small" Icon="@Icons.Material.Outlined.Edit" OnClick="@context.Actions.StartEditingItemAsync" />
                </CellTemplate>
            </TemplateColumn>
        </Columns>
        <PagerContent>
            <MudDataGridPager T="ConceptTemplateDTO" />
        </PagerContent>
    </MudDataGrid>
</SpyPageContent>

@code {
    private GetManyConceptTemplatesResponse? _response;

    private string _newItemName = "";

    private MudForm? _form;
    private MudMenu? _menu;

    protected override async Task OnInitializedAsync()
    {
        await FetchItems();
    }

    private async Task Add(string name)
    {
        if (_form is null || _menu is null)
            return;

        await _form.Validate();
        if (!_form.IsValid)
            return;

        await _menu.CloseAllMenusAsync();

        await Mediator.Send(new AddConceptTemplateCommand(name, []));

        await FetchItems();
    }

    private async Task FetchItems()
    {
        _response = await Mediator.Send(new GetManyConceptTemplatesQuery(LifeState.Alive));
    }

    void StartedEditingItem(ConceptTemplateDTO item)
    {
    }

    void CanceledEditingItem(ConceptTemplateDTO item)
    {
    }

    async Task CommittedItemChanges(ConceptTemplateDTO item)
    {
        await Mediator.Send(new UpdateConceptTemplateCommand(item.Id, item.Name, []));
    }
}