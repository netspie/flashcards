@page "/Account/RegisterConfirmation"

@using System.Text
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities

@inject UserManager<ApplicationUser> UserManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager

<PageTitle>Register confirmation</PageTitle>

<StatusMessage Message="@statusMessage" />

<SpyPageContent class="gap-8">
    <MudText Typo="@Typo.h3" Class="!font-bold">Register confirmation</MudText>
    @if (emailConfirmationLink is not null)
    {
        <p>
            @* This app does not currently have a real email sender registered, see <a href="https://aka.ms/aspaccountconf">these docs</a> for how to configure a real email sender.
            Normally this would be emailed: <a href="@emailConfirmationLink">Click here to confirm your account</a> *@

            You have registered successfully. Redirecting to login...
            
        </p>
    }
    else
    {
        <p role="alert">Please check your email to confirm your account.</p>
    }
</SpyPageContent>

@code {
    private string? emailConfirmationLink;
    private string? statusMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromQuery]
    private string? Email { get; set; }

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    protected override async Task OnInitializedAsync()
    {        
        if (Email is null)
            RedirectManager.RedirectTo("");

        var user = await UserManager.FindByEmailAsync(Email);
        if (user is null)
        {
            HttpContext.Response.StatusCode = StatusCodes.Status404NotFound;
            statusMessage = "Error finding user for unspecified email";
        }
        else if (EmailSender is IdentityNoOpEmailSender)
        {
            // Once you add a real email sender, you should remove this code that lets you confirm the account
            emailConfirmationLink = await GetEmailConfirmationLink(user, UserManager, NavigationManager, ReturnUrl);
            RedirectManager.RedirectTo(emailConfirmationLink);
        }
    }

    public static async Task<string> GetEmailConfirmationLink(
        ApplicationUser user,
        UserManager<ApplicationUser> userManager,
        NavigationManager navigationManager,
        string? returnUrl)
    {
        var userId = await userManager.GetUserIdAsync(user);
        var code = await userManager.GenerateEmailConfirmationTokenAsync(user);
        code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        
        return navigationManager.GetUriWithQueryParameters(
            navigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
            new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = returnUrl });
    }
}
