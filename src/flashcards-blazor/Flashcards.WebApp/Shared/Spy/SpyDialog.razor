
<CascadingValue Value="this">
    <MudCard Class="@Class" Style="@Style">
        <MudCardContent Class="@ContentClass" Style=@ContentStyle>
            @if (Loading)
            {
                <div class="flex items-center justify-center">
                    @if (LoadingContent is null)
                    {
                        <MudProgressCircular Indeterminate />
                    }
                    else
                    {
                        @LoadingContent
                    }
                </div>
            }
            else
            {
                @ChildContent
            }
        </MudCardContent>
        <MudCardActions Class="d-flex justify-content-center mb-2 gap-2">
            @Buttons
        </MudCardActions>
    </MudCard>
</CascadingValue>

@code {
    [CascadingParameter] public IMudDialogInstance MudDialog { get; init; } = null!;

    [Parameter] public string? Class { get; set; }
    [Parameter] public string? Style { get; set; }

    [Parameter] public string? ContentClass { get; set; }
    [Parameter] public string? ContentStyle { get; set; }

    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public RenderFragment? LoadingContent { get; set; }
    [Parameter] public RenderFragment? Buttons { get; set; }

    public bool Loading { get; private set; } = true;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Loading = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    public void Submit<T>(T arg) => MudDialog.Close(DialogResult.Ok(arg));
    public void Cancel() => MudDialog.Close(DialogResult.Cancel());
}
