@using Flashcards.WebApp.Shared.Entities

@inject IMediator Mediator
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject NavigationManager Navigation

<MudContainer MaxWidth="MaxWidth.Medium" Class="!flex !flex-col !gap-8">
    <MudText Typo="@Typo.h3">Projects</MudText>
    <SpyRemoteDataGrid T="ProjectDTO"
                       Items="@_projects"
                       AddedItem="@Add"
                       CommittedItemChanges="@Update">
        <Toolbar>
            <MudIconButton Icon="@Icons.Material.Filled.Archive" OnClick="@OpenArchivedDialog" />
        </Toolbar>
        <Columns>
            <SpyPropertyColumn Property="@(x => x.Name)" Bold />
        </Columns>
        <RowMenuItems>
            <MudMenuItem Label="Archive" OnClick="@(x => Archive(context.Id))"/>
        </RowMenuItems>
    </SpyRemoteDataGrid>
</MudContainer>

@code {
    private ProjectDTO[] _projects = [];

    protected override Task OnInitializedAsync() => FetchItems();

    private Task Add(string name) => SendCommandAndFetchItems(new AddProjectCommand(name));
    private Task Update(ProjectDTO item) => SendCommandAndFetchItems(new UpdateProjectCommand(item.Id, item.Name));
    private Task Archive(string itemId) => SendCommandAndFetchItems(new ArchiveProjectCommand(itemId));

    private async Task OpenArchivedDialog()
    {
        var dialog = await DialogService.ShowAsync<ProjectsArchivedDialog>("Archived Projects");
        await dialog.Result;
        await FetchItems();
    }

    private async Task FetchItems()
    {
        var response = await Mediator.Send(new GetProjectsQuery());
        _projects = response.Values;
    }

    private async Task SendCommandAndFetchItems(ICommand command)
    {
        await Snackbar.Run(Mediator.Send(command));
        await FetchItems();
    }
}