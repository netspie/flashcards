@inject IMediator Mediator
@inject ISnackbar Snackbar
@inject IDialogService DialogService

@using TagDTO = GetProjectTagsQueryResponse.ProjectTagDTO

<MudContainer MaxWidth="MaxWidth.Medium" Class="!flex !flex-col !gap-8">
    <MudText Typo="@Typo.h6">Tags</MudText>
    <MudStack Row Class="!w-full">
        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => Add()" Class="!h-fit" />
    </MudStack>
    <MudExpansionPanels MultiExpansion>
        <MudExpansionPanel Text="Tags" Expanded>
            <MudTreeView Items="@_treeItems" Hover="true" Dense>
                <ItemTemplate Context="item">
                    <MudTreeViewItem Items="@item.Children">
                        <BodyContent>
                            <MudStack Row Class="!w-full gap-2">
                                <MudIcon Icon="@item.Icon" Style=@($"color: {(item as TagTreeItemData)!.DTO.Color} !important") />
                                <MudText>@item.Text</MudText>
                            </MudStack>
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                <MudMenuItem Label="Add" OnClick="@(() => Add(parentTagId: (item as TagTreeItemData)!.DTO.Id))" />
                                <MudMenuItem Label="Edit" OnClick="@(() => OnEdit((item as TagTreeItemData)!.DTO))" />
                            </MudMenu>
                        </BodyContent>
                    </MudTreeViewItem>
                </ItemTemplate>
            </MudTreeView>
        </MudExpansionPanel>
    </MudExpansionPanels>
</MudContainer>

@code {
    [Parameter, EditorRequired] public string ProjectId { get; set; } = "";

    private TagDTO[] _tags = [];

    protected override Task OnInitializedAsync() => FetchItems();

    private Task Add(string? parentTagId = null, string color = "black", int order = int.MaxValue) =>
        SendCommandAndFetchItems(new AddTagCommand("New Tag", color, ProjectId, parentTagId, order));

    private async Task OnEdit(TagDTO dto)
    {
        var dialog = await DialogService.ShowAsync<TagDialog>("Edit Tag", new DialogParameters { { nameof(TagDialog.DTO), dto } });

        var result = await dialog.GetReturnValueAsync<TagDTO>();
        if (result is not null)
            await Update(result);
    }

    private Task Update(GetProjectTagsQueryResponse.ProjectTagDTO item) => 
        SendCommandAndFetchItems(new UpdateTagCommand(item.Id, item.Name, item.Color));

    private Task Delete(string itemId) => 
        SendCommandAndFetchItems(new DeleteTagsCommand([itemId]));

    private List<TagTreeItemData> _treeItems = new();

    private string _newItemName = "";

    private async Task FetchItems()
    {
        var response = await Mediator.Send(new GetProjectTagsQuery(ProjectId));
        _tags = response.Values;

        _treeItems.Clear();

        var map = new Dictionary<string, TagTreeItemData>();

        foreach (var tag in _tags)
        {
            if (!map.TryGetValue(tag.Id, out var treeItem))
                map.Add(tag.Id, treeItem = new());

            treeItem.DTO = tag;
            treeItem.Text = tag.Name;

            if (tag.ParentTagId is not null)
            {
                if (!map.TryGetValue(tag.ParentTagId, out var parent))
                    map.Add(tag.ParentTagId, parent = new());

                parent.Children ??= new();
                parent.Children.Insert(Math.Min(tag.Order, parent.Children.Count), treeItem);
            }
            else
                _treeItems.Insert(Math.Min(tag.Order, _treeItems.Count), treeItem);
        }
    }

    private async Task SendCommandAndFetchItems(ICommand command)
    {
        await Snackbar.Run(Mediator.Send(command));
        await FetchItems();
    }

    public class TagTreeItemData : TreeItemData<string>
    {
        public TagDTO DTO = new();

        public TagTreeItemData()
        {
            Icon = Icons.Material.Filled.Bookmark;
        }
    }
}