@using Flashcards.WebApp.Shared.UseCases
@using Flashcards.WebApp.Infrastructure.RequestHandlerBehaviors
@using TagDTO = GetProjectTagsQueryResponse.ProjectTagDTO

@inject IScopedMediator Mediator
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.Medium" Class="!flex !flex-col !gap-8">
    <MudText Typo="@Typo.h6">Tags</MudText>
    <MudStack Row Class="!w-full">
        <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="() => Add()" Class="!h-fit" />
    </MudStack>
    <MudExpansionPanels MultiExpansion>
        <MudExpansionPanel Text="Tags" Expanded>
            <MudTreeView Items="@_treeItems" Hover="true" Dense>
                <ItemTemplate Context="item">
                    <MudTreeViewItem Items="@item.Children">
                        <BodyContent>
                            <MudStack Row Class="!w-full gap-2">
                                <MudIcon Icon="@item.Icon" Style=@($"color: {item.Value?.Color} !important") />
                                <MudText>@item.Text</MudText>
                            </MudStack>
                            <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                <MudMenuItem Label="Add After" OnClick="@(() => Add(item.Value?.ParentTagId, order: item.Value?.Order + 1 ?? 0))" />
                                <MudMenuItem Label="Add Beneath" OnClick="@(() => Add(item.Value?.Id))" />
                                <MudMenuItem Label="Edit" OnClick="@(() => OnEdit(item.Value ?? TagDTO.Default))" />
                                <MudMenuItem Label="Delete" OnClick="@(() => Delete(item.Value?.Id ?? ""))" />
                            </MudMenu>
                        </BodyContent>
                    </MudTreeViewItem>
                </ItemTemplate>
            </MudTreeView>
        </MudExpansionPanel>
    </MudExpansionPanels>
</MudContainer>

@code {
    [Parameter, EditorRequired] public string ProjectId { get; set; } = "";

    private TagDTO[] _tags = [];
    private List<TagTreeItemData> _treeItems = new();

    protected override Task OnInitializedAsync() => 
        FetchItems();

    private Task Add(string? parentTagId = null, string color = "black", int order = int.MaxValue) =>
        SendCommandAndFetchItems(new AddTagCommand("New Tag", color, ProjectId, parentTagId, order));

    private async Task OnEdit(TagDTO dto)
    {
        var dialog = await DialogService.ShowAsync<TagDialog>("Edit Tag", new DialogParameters { { nameof(TagDialog.DTO), dto } });
        var result = await dialog.GetReturnValueAsync<TagDialog.SubmitData>();
        if (result is null)
            return;

        await Update(result.DTO);
        if (result.ApplyColorToChildren)
        {
            var treeItem = _treeItems.FindRecursive(x => 
                x.Children.CastToListOrDefault<TagTreeItemData>(), x => x.Value?.Id == result.DTO.Id);

            await (treeItem?.Children ?? []).ForEachRecursiveAsync(
                x => x.Children,
                x => x.Value.IfNotNull(x => Update(x with { Color = result.DTO.Color })));
        }
    }   

    private Task Update(GetProjectTagsQueryResponse.ProjectTagDTO item) => 
        SendCommandAndFetchItems(new UpdateTagCommand(item.Id, item.Name, item.Color, item.Order));

    private Task Delete(string itemId) => 
        SendCommandAndFetchItems(new DeleteTagsCommand([itemId]));

    private async Task FetchItems()
    {
        var response = await Mediator.Send(new GetProjectTagsQuery(ProjectId));
        _tags = response.Values;
        _treeItems = _tags.GetTreeItems<TagTreeItemData, TagDTO>(
            x => x.Id, x => x?.ParentTagId, x => x.Name, x => x?.Order,
            createTreeItem: x => new(x));
    }

    private async Task SendCommandAndFetchItems(ICommand command)
    {
        await Snackbar.Run(() => Mediator.Send(command));
        await FetchItems();
    }

    public class TagTreeItemData : TreeItemData<TagDTO>
    {
        public TagTreeItemData() {}
        public TagTreeItemData(TagDTO value) : base(value)
        {
            Icon = Icons.Material.Filled.Bookmark;
        }
    }
}