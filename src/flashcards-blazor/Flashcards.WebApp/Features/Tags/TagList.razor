@using Flashcards.WebApp.Shared.Entities
@using Flashcards.WebApp.Shared.UseCases
@using Flashcards.WebApp.Infrastructure.RequestHandlerBehaviors
@using TagDTO = GetProjectTagsQueryResponse.ProjectTagDTO

@inject IScopedMediator Mediator
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudContainer MaxWidth="MaxWidth.Medium" Class="!flex !flex-col !gap-8">
    <MudText Typo="@Typo.h6">Tags</MudText>
    <MudStack Row Class="!w-full">
        <MudButtonGroup Color="Color.Secondary" Variant="Variant.Filled">
            <MudButton OnClick="() => Add(order: 0)">
                <MudIcon Icon="@Icons.Material.Filled.Add" />
                <MudIcon Icon="@Icons.Material.Filled.Bookmark" />
            </MudButton>
            <MudButton OnClick="() => Add(order: int.MaxValue)">
                <MudIcon Icon="@Icons.Material.Filled.Bookmark" />
                <MudIcon Icon="@Icons.Material.Filled.Add" />
            </MudButton>
        </MudButtonGroup>
        <MudButtonGroup Color="Color.Primary" Variant="Variant.Filled">
            <MudIconButton Icon="@Icons.Material.Filled.UnfoldMore" OnClick="() => _treeView?.ExpandAllAsync().ThenAsync(() => _expansionPanel?.ExpandAllAsync())" Class="!h-fit" />
            <MudIconButton Icon="@Icons.Material.Filled.UnfoldLess" OnClick="() => _treeView?.CollapseAllAsync().ThenAsync(() => _expansionPanel?.CollapseAllAsync())" Class="!h-fit" />
        </MudButtonGroup>
    </MudStack>
    <MudExpansionPanels @ref=@_expansionPanel MultiExpansion Elevation=2>
        <MudExpansionPanel Text="Tags">
            <TitleContent>
                @foreach (var tag in _tags.Where(x => x.ParentTagId is null).OrderBy(x => x.Order))
                {
                    <MudChip Value="@tag.Name" Class="!text-white" Style=@($"background: {tag.Color} !important") />
                }
            </TitleContent>
            <ChildContent>
                <MudTreeView @ref=@_treeView Items="@_treeItems" Hover="true" Dense>
                    <ItemTemplate Context="item">
                        <MudTreeViewItem Items="@item.Children">
                            <BodyContent>
                                <MudStack Row Class="!w-full gap-2">
                                    <MudIcon Icon="@item.Icon" Style=@($"color: {item.Value?.Color} !important") />
                                    <MudText>@item.Text</MudText>
                                </MudStack>
                                <MudMenu Icon="@Icons.Material.Filled.MoreVert">
                                    <MudMenuItem Label="Add At Start" OnClick="@(() => Add(item.Value?.ParentTagId, item.Value!.Color, order: 0))" />
                                    <MudMenuItem Label="Add After" OnClick="@(() => Add(item.Value?.ParentTagId,item.Value!.Color, order: item.Value!.Order + 1))" />
                                    <MudMenuItem Label="Add Beneath" OnClick="@(() => Add(item.Value?.Id))" />
                                    <MudMenuItem Label="Add At End" OnClick="@(() => Add(item.Value?.ParentTagId, item.Value!.Color, order: int.MaxValue))" />
                                    <MudMenuItem Label="Edit" OnClick="@(() => OnEdit(item.Value!))" />
                                    @if (item.Value!.Order > 0)
                                    {
                                        <MudMenuItem Label="Move To Start" OnClick="@(() => Update(item.Value! with { Order = 0 }))" />
                                        <MudMenuItem Label="Move Up" OnClick="@(() => Update(item.Value! with { Order = item.Value!.Order - 1}))" />
                                    }
                                    @if (item.Value!.Order < _tags.Where(x => x.ParentTagId == item.Value!.ParentTagId).Count() - 1)
                                    {
                                        <MudMenuItem Label="Move Down" OnClick="@(() => Update(item.Value! with { Order = item.Value!.Order + 1}))" />
                                        <MudMenuItem Label="Move To End" OnClick="@(() => Update(item.Value! with { Order = int.MaxValue }))" />
                                    }
                                    <MudMenuItem Label="Delete" OnClick="@(() => Delete(item.Value?.Id ?? ""))" />
                                </MudMenu>
                            </BodyContent>
                        </MudTreeViewItem>
                    </ItemTemplate>
                </MudTreeView>
            </ChildContent>
        </MudExpansionPanel>
    </MudExpansionPanels>
</MudContainer>

@code {
    [Parameter, EditorRequired] public string ProjectId { get; set; } = "";

    private TagDTO[] _tags = [];
    private List<TagTreeItemData> _treeItems = new();

    private MudExpansionPanels? _expansionPanel;
    private MudTreeView<TagDTO>? _treeView;

    protected override Task OnInitializedAsync() => 
        FetchItems();

    private Task Add(string? parentTagId = null, string color = "black", int order = int.MaxValue) =>
        SendCommandAndFetchItems(new AddTagCommand("New Tag", color, ProjectId, parentTagId, order));

    private async Task OnEdit(TagDTO dto)
    {
        var dialog = await DialogService.ShowAsync<TagDialog>("Edit Tag", new DialogParameters { { nameof(TagDialog.DTO), dto } });
        var result = await dialog.GetReturnValueAsync<TagDialog.SubmitData>();
        if (result is null)
            return;

        if (result.ApplyColorToChildren)
        {
            var treeItem = _treeItems.FindRecursive(x => 
                x.Children.CastToListOrDefault<TagTreeItemData>(), x => x.Value?.Id == result.DTO.Id);

            if (treeItem is null)
                throw new NotFoundException("Could not find tree item");

            await Snackbar.Run(() => 
                treeItem.ForEachRecursiveAsync(
                    x => x.Children.CastToListOrDefault<TagTreeItemData>(),
                    x => x.Value.IfNotNull(async x => await Mediator.Send(new UpdateTagCommand(x.Id, x.Name, result.DTO.Color, x.Order)))));

            await FetchItems();
        }
        else
            await Update(result.DTO);
    }

    private Task Update(TagDTO item) => 
        SendCommandAndFetchItems(new UpdateTagCommand(item.Id, item.Name, item.Color, item.Order));

    private async Task Delete(string itemId)
    {
        if (await DialogService.ShowAndGetSubmittedAsync<SpyYesNoDialog>("Delete"))
            await SendCommandAndFetchItems(new DeleteTagsCommand([itemId]));
    }

    private async Task FetchItems()
    {
        var response = await Mediator.Send(new GetProjectTagsQuery(ProjectId));
        _tags = response.Values;
        _treeItems = _tags.GetTreeItems<TagTreeItemData, TagDTO>(
            x => x.Id, x => x?.ParentTagId, x => x?.Order,
            createTreeItem: x => new(x));

        await InvokeAsync(StateHasChanged);
    }

    private async Task SendCommandAndFetchItems(ICommand command)
    {
        await Snackbar.Run(() => Mediator.Send(command));
        await FetchItems();
    }

    public class TagTreeItemData : TreeItemData<TagDTO>
    {
        public TagTreeItemData() {}
        public TagTreeItemData(TagDTO value) : base(value)
        {
            Icon = Icons.Material.Filled.Bookmark;
            Text = value.Name;
        }
    }
}