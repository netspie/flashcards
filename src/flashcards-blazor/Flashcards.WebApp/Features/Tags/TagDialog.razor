@using TagDTO = GetProjectTagsQueryResponse.ProjectTagDTO;

@if (_dto is null) { return; }

<SpyDialog @ref=@_dialog>
    <ChildContent>
        <MudTextField Label="Name" Value="@_dto.Name" ValueChanged="@_dto.Setter(x => x.Name)"></MudTextField>
        <MudNumericField Label="Order" Value="@_dto.Order" ValueChanged="@_dto.Setter(x => x.Order)"></MudNumericField>
        <MudSelect Label="Color" Value=@_dto.Color ValueChanged="@_dto.Setter(x => x.Color)">
            @foreach (var color in Colors)
            {
                <MudSelectItem Value="color.Color">
                    <MudIcon Icon=@Icons.Material.Filled.Circle Style=@($"color: {color.Color}") />
                    @color.Name
                </MudSelectItem>
            }
        </MudSelect>
        <MudCheckBox Label="Apply Color To Children" @bind-Value=@_applyColorToChildren />
    </ChildContent>
    <Buttons>
        <MudButton Color="Color.Primary" OnClick="x => _dialog?.Submit(new SubmitData(_dto, _applyColorToChildren))">Save</MudButton>
        <MudButton Color="Color.Error" OnClick="x => _dialog?.Cancel()">Cancel</MudButton>
    </Buttons>
</SpyDialog>

@code {
    [Parameter] public GetProjectTagsQueryResponse.ProjectTagDTO? DTO { get; set; }
    private TagDTO? _dto;

    private SpyDialog? _dialog;
    private bool _applyColorToChildren;

    protected override void OnInitialized()
    {
        _dto = DTO?.DeepCopy() ?? TagDTO.Default;
    }

    private (string Color, string Name)[] Colors =
    [
        ("#ef4444", "Red"),
        ("#22c55e", "Green"),
        ("#3b82f6", "Blue"),
        ("#eab308", "Yellow"),
        ("#f97316", "Orange"),
        ("#a855f7", "Purple"),
        ("#000000", "Black"),
        ("#ffffff", "White"),
        ("#6b7280", "Gray"),
        ("#78350f", "Brown"),
        ("#ec4899", "Pink"),
        ("#06b6d4", "Cyan"),
        ("#d946ef", "Magenta"),
    ];

    public record SubmitData(TagDTO DTO, bool ApplyColorToChildren);
}